// Player state
let playerMoney = 50; // Starting money
let playerHealth = 100; // Starting health
const inventory = [];

// Adjust player money
function adjustPlayerMoney(amount) {
  playerMoney += amount;
  alert(`You now have ${playerMoney} money.`);
  if (playerMoney <= 0) {
    gameOver();
  }
}

// Adjust player health
function adjustPlayerHealth(amount) {
  playerHealth += amount;
  if (playerHealth > 100) playerHealth = 100; // Cap health at 100
  if (playerHealth <= 0) {
    alert('You have lost all your health and passed out! Game Over.');
    gameOver();
  } else {
    alert(`Your health is now ${playerHealth}.`);
  }
}

// Add an item to inventory
function addItemToInventory(item) {
  inventory.push(item);
  alert(`You received: ${item}`);
}

// Game Over function
function gameOver() {
  alert('You have lost all your money and have been claimed by the streets.\nGame Over');
  // Reset game state or stop further actions
  // Optionally, you can add logic to restart the game or show a game over screen
  // For example, you can disable all further interactions or reload the game
  location.reload(); // Reload the page to restart the game
}

// Character interactions
const characters = [
  {
    type: 'thief',
    description: 'A shady thief lurks here. Be careful, or you might lose what little you have!',
    onInteract: function () {
      const choice = prompt('The thief offers to give you some money... for a price. Do you (1) Agree or (2) Decline?');
      if (choice === '1') {
        alert('The thief tricks you and steals some of your belongings!');
        adjustPlayerMoney(-20); // Lose 20 money
      } else {
        alert('You wisely walk away from the thief.');
      }
    }
  },
  {
    type: 'cop',
    description: 'A police officer stands nearby, observing everything.',
    onInteract: function () {
      const choice = prompt('The cop asks if you have proper identification. Do you (1) Explain your situation or (2) Try to bribe?');
      if (choice === '1') {
        alert('The cop feels sorry for you and gives you some helpful advice.');
        adjustPlayerHealth(10); // Gain 10 health
      } else {
        alert('The cop catches you bribing and fines you!');
        adjustPlayerMoney(-10); // Lose 10 money
      }
    }
  },
  {
    type: 'old-man',
    description: 'An old man sits here, looking friendly.',
    onInteract: function () {
      const choice = prompt('The old man offers to tell you where to find resources. Do you (1) Listen or (2) Ignore him?');
      if (choice === '1') {
        alert('The old man shares a valuable tip!');
        adjustPlayerMoney(10); // Gain 10 money
      } else {
        alert('You miss out on some helpful advice.');
      }
    }
  },
  {
    type: 'woman',
    description: 'A local woman is standing here, looking curious.',
    onInteract: function () {
      const choice = prompt('The woman offers to sell you a first aid kit for 15 money. Do you (1) Buy or (2) Decline?');
      if (choice === '1') {
        if (playerMoney >= 15) {
          alert('You bought a first aid kit. It might save you later!');
          adjustPlayerMoney(-15); // Lose 15 money
          addItemToInventory('first aid kit');
        } else {
          alert('You don’t have enough money!');
        }
      } else {
        alert('You decline the offer and walk away.');
      }
    }
  }
];

// Trash digging interaction
function digThroughTrash() {
  const outcome = Math.random();
  if (outcome < 0.3) {
    alert('You found some money in the trash!');
    adjustPlayerMoney(10); // Gain 10 money
  } else if (outcome < 0.6) {
    alert('You accidentally cut yourself while digging through the trash.');
    adjustPlayerHealth(-15); // Lose 15 health
  } else {
    alert('You found some useful scraps that might help later.');
    addItemToInventory('scraps');
  }
}

// Store interaction
function visitStore() {
  const choice = prompt('Welcome to the store! Choose an option: (1) Buy food (+20 health for 10 money), (2) Buy water (+10 health for 5 money), (3) Leave.');
  if (choice === '1') {
    if (playerMoney >= 10) {
      alert('You bought food and regained some health.');
      adjustPlayerMoney(-10); // Lose 10 money
      adjustPlayerHealth(20); // Gain 20 health
    } else {
      alert('You don’t have enough money!');
    }
  } else if (choice === '2') {
    if (playerMoney >= 5) {
      alert('You bought water and regained some health.');
      adjustPlayerMoney(-5); // Lose 5 money
      adjustPlayerHealth(10); // Gain 10 health
    } else {
      alert('You don’t have enough money!');
    }
  } else {
    alert('You leave the store.');
  }
}

// Randomly place characters, trash, and stores in the maze
function addInteractiveElements(layout, count) {
  const mazeHeight = layout.length;
  const mazeWidth = layout[0].length;

  for (let i = 0; i < count; i++) {
    let placed = false;

    while (!placed) {
      const row = Math.floor(Math.random() * mazeHeight);
      const col = Math.floor(Math.random() * mazeWidth);

      const isOccupied = $(`.row${row} .col${col}`).hasClass('interactive');

      if (!isOccupied) {
        const elementType = Math.random();
        if (elementType < 0.6) {
          // Place a character
          const character = characters[Math.floor(Math.random() * characters.length)];
          $(`.row${row} .col${col}`)
            .addClass(`interactive ${character.type}`)
            .attr('title', character.description)
            .on('click', function () {
              character.onInteract();
            });
        } else if (elementType < 0.8) {
          // Place trash
          $(`.row${row} .col${col}`)
            .addClass('interactive trash')
            .attr('title', 'A pile of trash is here. Maybe you should check it out.')
            .on('click', function () {
              digThroughTrash();
            });
        } else {
          // Place a store
          $(`.row${row} .col${col}`)
            .addClass('interactive store')
            .attr('title', 'A store is here. Maybe you can buy something useful.')
            .on('click', function () {
              visitStore();
            });
        }

        placed = true;
      }
    }
  }
}

// Export functions
export { addInteractiveElements };

